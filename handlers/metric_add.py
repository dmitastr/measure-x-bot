from telegram.ext import (
    Updater, 
    CallbackContext, 
    InlineQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    Filters
)
from telegram import (
    Bot,
    InlineQueryResultArticle, 
    InputTextMessageContent, 
    Update,
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove,
    ParseMode
)

import logging
import yaml
import arrow
import os

from db_utils import YDataBase
from ydb_persistence import YDBPersistence
from utils import upload_photo, create_text


GET_PARAM, SET_PARAM, CHECK = range(3)

reply_keyboard = [["–æ—Ç–º–µ–Ω–∞"]]

steps = {
    0: {
        "field": "name",
        "msg": "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è",
        "reply_keyboard": reply_keyboard,
        "func": lambda x: x.text
    },
    1: {
        "field": "scale",
        "msg": "–í –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å? –ü—Ä–∏—à–ª–∏ 2 —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n-100 100\n6 50",
        "reply_keyboard": reply_keyboard,
        "func": lambda x: [int(val) for val in x.text.split(" ")]
    },
    2: {
        "field": "template",
        "msg": ("–ü—Ä–∏—à–ª–∏ —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –í —à–∞–±–ª–æ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü. —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏"
        +"\n–°–ø–µ—Ü —Å–ª–æ–≤–∞:\n"
        +"\n".join(
            [
                "- <code>{value}</code> - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è",
                # "- <code>{unit}</code> - –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
                "- <code>{first_name}</code> - –∏–º—è —Ç–æ–≥–æ, –∫—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç",
                "- <code>{last_name}</code> - —Ñ–∞–º–∏–ª–∏—è"
            ])
        +"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–≤–∞—à–∞ –∞—É—Ñ–Ω–æ—Å—Ç—å {value}%. –ê—É—Ñ! üê∫"
        ),

        "reply_keyboard": reply_keyboard,
        "parse_mode": ParseMode.HTML,
        "func": lambda x: x.text
    },
    3: {
        "field": "img_url",
        "msg": "–ü—Ä–∏—à–ª–∏ –ø–∏–∫—á—É –∏–ª–∏ —Å—Å—ã–ª–∫—É - –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å. –ú–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "reply_keyboard": [["–æ—Ç–º–µ–Ω–∞", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]],
        "func": lambda x: None if x.text=="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else upload_photo(x)
    },
    4: {
        "field": "check",
        "msg": "–ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ",
        "reply_keyboard": [["–æ—Ç–º–µ–Ω–∞", "–≤—Å—ë –æ–∫"]],
        "func": lambda x: None if x=="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else x,
        "add": False,
        "msg_func": True
    }, 
}

def add_metric_enter(update: Update, context: CallbackContext) -> int:
    context.user_data["metric"] = {
        "id": arrow.utcnow().int_timestamp,
        "creator_id": update.effective_user.id,
        "volatile_level": 1
    }
    context.user_data["step"] = 0
    step = context.user_data["step"]
    step_params = steps[step]
    reply_markup = ReplyKeyboardMarkup(
        step_params["reply_keyboard"], 
        one_time_keyboard=True, 
        resize_keyboard=True
    )
    update.message.reply_text(
        step_params["msg"],
        reply_markup=reply_markup,
        parse_mode=step_params.get("parse_mode")
    )
    return SET_PARAM


def add_metric_set_param(update: Update, context: CallbackContext) -> int:
    metric = context.user_data["metric"]
    step = context.user_data["step"]
    step_params = steps[step]
    if update.message.text or update.message.photo and step_params.get("add", True):
        if step_params["field"]=="scale":
            metric["{field}_low".format(**step_params)], metric["{field}_high".format(**step_params)] = step_params.get("func", lambda x: x.text)(update.message)
        else:
            metric[step_params["field"]] = step_params.get("func", lambda x: x.text)(update.message)
    context.user_data["step"] += 1
    try:
        step_params = steps[step+1]
    except:
        pass
    reply_markup = ReplyKeyboardMarkup(
        step_params["reply_keyboard"], 
        one_time_keyboard=True, 
        resize_keyboard=True
    )
    txt = step_params["msg"]
    if step_params.get("msg_func"):
        txt += "\n" + create_text(
            user_id=update.effective_user.id, 
            first_name=update.effective_user.first_name,
            last_name=update.effective_user.last_name,
            query="",
            params=metric
        )
    update.message.reply_text(
        txt,
        reply_markup=reply_markup,
        parse_mode=step_params.get("parse_mode")
    )
    return SET_PARAM


def add_metric_final(update: Update, context: CallbackContext) -> int:
    metric = context.user_data["metric"]
    result = YDataBase().execute_query(
        query='''UPSERT INTO measures (id, creator_id, name, scale_high, scale_low, template, volatile_level, img_url) 
        VALUES ({id}, {creator_id}, "{name}", {scale_high}, {scale_low}, "{template}", {volatile_level}, "{img_url}")'''.format(
            **metric
        )
    )
    update.message.reply_text(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–¥–µ–ª–∞–ª_–∞ –Ω–æ–≤—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å - {name}".format(**metric),
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


def add_metric_end(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–ù–µ –æ—á–µ–Ω—å-—Ç–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


add_metric_handl = ConversationHandler(
    entry_points=[CommandHandler('add_metric', add_metric_enter)],
    states={
        SET_PARAM: [MessageHandler(~(Filters.regex('^–≤—Å—ë –æ–∫$')|Filters.regex('^–æ—Ç–º–µ–Ω–∞$')), add_metric_set_param)],
        CHECK: [MessageHandler(~(Filters.regex('^–≤—Å—ë –æ–∫$')|Filters.regex('^–æ—Ç–º–µ–Ω–∞$')), add_metric_final)],
    },
    fallbacks=[
        MessageHandler(Filters.regex('^–æ—Ç–º–µ–Ω–∞$'), add_metric_end),
        MessageHandler(Filters.regex('^–≤—Å—ë –æ–∫$'), add_metric_final)
    ],
    persistent=True,
    name='add_metric_handler'
)