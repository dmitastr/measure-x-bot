from telegram.ext import (
    CallbackContext, 
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
)
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    ReplyKeyboardRemove,
    ParseMode
)

import logging

from db_utils import YDataBase
from utils import upload_photo, dev_ids

logger = logging.getLogger(__name__)

PRINT_INFO, CHOOSE, CHECK = range(3)

reply_keyboard = [["–æ—Ç–º–µ–Ω–∞"]]

steps = {
    0: {
        "field": "name",
        "msg": "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è",
        "reply_keyboard": reply_keyboard,
        "func": lambda x: x.text
    },
    1: {
        "field": "scale",
        "msg": "–í –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å? –ü—Ä–∏—à–ª–∏ 2 —á–∏—Å–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n-100 100\n6 50",
        "reply_keyboard": reply_keyboard,
        "func": lambda x: [int(val) for val in x.text.split(" ")]
    },
    2: {
        "field": "template",
        "msg": ("–ü—Ä–∏—à–ª–∏ —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –í —à–∞–±–ª–æ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü. —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏"
        +"\n–°–ø–µ—Ü —Å–ª–æ–≤–∞:\n"
        +"\n".join(
            [
                "- <code>{value}</code> - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è",
                # "- <code>{unit}</code> - –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
                "- <code>{first_name}</code> - –∏–º—è —Ç–æ–≥–æ, –∫—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç",
                "- <code>{last_name}</code> - —Ñ–∞–º–∏–ª–∏—è"
            ])
        +"\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–≤–∞—à–∞ –∞—É—Ñ–Ω–æ—Å—Ç—å {value}%. –ê—É—Ñ! üê∫"
        ),

        "reply_keyboard": reply_keyboard,
        "parse_mode": ParseMode.HTML,
        "func": lambda x: x.text
    },
    3: {
        "field": "img_url",
        "msg": "–ü—Ä–∏—à–ª–∏ –ø–∏–∫—á—É –∏–ª–∏ —Å—Å—ã–ª–∫—É - –æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ—Ä—è—Ç—å. –ú–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        "reply_keyboard": [["–æ—Ç–º–µ–Ω–∞", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]],
        "func": lambda x: None if x.text=="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else upload_photo(x)
    },
    4: {
        "field": "check",
        "msg": "–ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤—Å—ë –≤–µ—Ä–Ω–æ",
        "reply_keyboard": [["–æ—Ç–º–µ–Ω–∞", "–≤—Å—ë –æ–∫"]],
        "func": lambda x: None if x=="–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else x,
        "add": False,
        "msg_func": True
    }, 
}

def edit_metric_enter(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    context.user_data["metric"] = YDataBase().fetch_last_config(user_id=None if user_id in dev_ids else user_id)
    metrics = context.user_data["metric"]
    if metrics:
        keyboard = [
            [InlineKeyboardButton(metrics["name"], callback_data=metrics["name"])]
            for m in metrics
        ] + [[InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="end")]]

        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "–ö–∞–∫–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=reply_markup
        )
        return PRINT_INFO
    
    else:
        update.message.reply_text(
            "–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤!",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


def show_selected_metric(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    metric_selected_ls = [m for m in context.user_data["metric"] if m["name"]==query]
    if metric_selected_ls:
        metric_selected = metric_selected_ls[0]
        context.user_data["metric_selected"] = metric_selected
        text = "–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–î–∏–∞–ø–∞–∑–æ–Ω: {scale_low}...{scale_high}\n–®–∞–±–ª–æ–Ω: {template}\n".format(**metric_selected)
        keyboard = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete")],
            [InlineKeyboardButton("<", callback_data="back")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text,
            reply_markup=reply_markup
        )
        return CHOOSE


def delete_selected_metric(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    metric_selected = context.user_data["metric_selected"]
    try:
        update.message.reply_text(
            "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!"
        )
        result = YDataBase().execute_query("DELETE FROM measures WHERE id={id}".format(**metric_selected))
        user_id = update.effective_user.id
        context.user_data["metric"] = YDataBase().fetch_last_config(user_id=None if user_id in dev_ids else user_id)
        metrics = context.user_data["metric"]
        if metrics:
            keyboard = [
                [InlineKeyboardButton(metrics["name"], callback_data=metrics["name"])]
                for m in metrics
            ] + [[InlineKeyboardButton("–æ—Ç–º–µ–Ω–∞", callback_data="end")]]

            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                "–ö–∞–∫–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏—Ç—å?",
                reply_markup=reply_markup
            )
            return PRINT_INFO
        else:
            update.message.reply_text(
                "–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤!",
                reply_markup=ReplyKeyboardRemove()
            )

    except Exception as e:
        logger.exception("Error deleting metric")
        update.message.reply_text(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=ReplyKeyboardRemove()
        )
    return ConversationHandler.END


def edit_metric_final(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–ù–µ –æ—á–µ–Ω—å-—Ç–æ –∏ —Ö–æ—Ç–µ–ª–æ—Å—å.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


edit_metric_handl = ConversationHandler(
    entry_points=[CommandHandler('edit_metric', edit_metric_enter)],
    states={
        PRINT_INFO: [CallbackQueryHandler(show_selected_metric, pattern=r'\w*')],
        CHOOSE: [
            CallbackQueryHandler(delete_selected_metric, pattern=r'^delete$'),
        ],
    },
    fallbacks=[
        CallbackQueryHandler(edit_metric_final, pattern=r'^end$'),
    ],
    persistent=True,
    name='add_metric_handler'
)